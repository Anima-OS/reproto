extern crate reproto_backend as backend;
extern crate reproto_core as core;
extern crate reproto_manifest as manifest;

use core::{RpPackage, RpVersionedPackage};
use std::fmt;
use std::rc::Rc;
use std::str;

pub struct SimpleCompile {
    pub decl: core::RpDecl,
    pub package_prefix: Option<RpPackage>,
}

/// Perform a simplified compilation that outputs the result into the provided Write
/// implementation.
pub fn simple_compile<L: manifest::Lang, C>(
    out: &mut fmt::Write,
    config: SimpleCompile,
    modules: Vec<L::Module>,
    compile: C,
) -> core::errors::Result<()>
where
    C: Fn(Rc<core::Context>, backend::Environment, manifest::Manifest<L>) -> core::errors::Result<()>,
{
    let SimpleCompile {
        decl,
        package_prefix,
    } = config;

    // Dummy resolver.
    let resolver = Box::new(core::EmptyResolver);

    let capturing = core::CapturingFilesystem::new();
    let ctx = Rc::new(core::Context::new(capturing.filesystem()));
    let mut env = backend::Environment::new(ctx.clone(), package_prefix.clone(), resolver);

    let file = core::RpFile {
        comment: vec![],
        options: vec![],
        decls: vec![decl],
    };

    let package = package_prefix
        .as_ref()
        .map(|package| RpVersionedPackage::new(package.clone(), None));

    env.import_file(file, package)?;

    let preamble = manifest::ManifestPreamble::new(Some(manifest::Language::Java), None);
    let mut manifest = manifest::read_manifest::<L>(preamble)?;
    manifest.modules = modules;
    manifest.package_prefix = package_prefix;

    compile(ctx, env, manifest)?;

    let borrowed = capturing.files().try_borrow()?;

    let comment = format!(
        " {} file(s) generated by https://github.com/reproto",
        borrowed.len()
    );

    if let Some(comment) = L::comment(comment.as_str()) {
        writeln!(out, "{}", comment.as_str())?;
        writeln!(out, "")?;
    }

    let mut it = borrowed.iter().peekable();

    while let Some((path, content)) = it.next() {
        if let Some(comment) = L::comment(format!(" File: {}", path.display()).as_str()) {
            writeln!(out, "{}", comment)?;
            writeln!(out, "")?;
        }

        out.write_str(str::from_utf8(content)?)?;

        if it.peek().is_some() {
            writeln!(out, "")?;
        }
    }

    Ok(())
}
